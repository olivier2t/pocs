# YAML anchors
shared:
# Task : sync and merge with rsync 2 rep. Used to merge stack and config
- &merge-stack-and-config
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: cycloid/cycloid-toolkit
      tag: latest
  run:
    path: /usr/bin/merge-stack-and-config


resource_types:
- name: terraform
  type: registry-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))


resources:
- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ((env))
    backend_type: http
    backend_config:
      address: '((cycloid_api_url))/inventory?jwt=($ inventory_jwt $)'
    vars:
      # aws_access_key: ((aws_access_key))
      # aws_secret_key: ((aws_secret_key))
      # aws_region: ((aws_region))
      keypair_public: ((keypair_public))
      env: ((env))
      project: ((project))
      customer: ((customer))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_DEFAULT_REGION: ((aws_region))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))


# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: git
  source:
    uri: ((terraform_git_repository))
    branch: ((terraform_git_branch))
    private_key: ((terraform_git_private_key))
    # username: ((terraform_git_username))
    # password: ((terraform_git_token))
    paths:
      - ((terraform_path))/*

groups:
- name: overview
  jobs:
    - terraform-plan
    - terraform-apply

- name: destroy
  jobs:
    - terraform-destroy


jobs:
  # Merge and trigger a plan whenever there is a commit in Terraform stack or config
  - name: terraform-plan
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true

      - put: tfstate
        params:
          plan_only: true
          terraform_source: git_stack-terraform/((terraform_path))/


  # Merge and trigger an apply whenever there is a terraform plan passed successfully
  - name: terraform-apply
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: true
          passed:
            - terraform-plan

      - put: tfstate
        params:
          plan_run: true
          terraform_source: git_stack-terraform/((terraform_path))/


  # Destroy the infrastructure
  - name: terraform-destroy
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: false

      - put: tfstate
        params:
          action: destroy
          terraform_source: git_stack-terraform/((terraform_path))/
        get_params:
          action: destroy
