# YAML anchors
shared:
# Task : sync and merge with rsync 2 rep. Used to merge stack and config
- &merge-stack-and-config
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: cycloid/cycloid-toolkit
      tag: latest
  run:
    path: /usr/bin/merge-stack-and-config


resource_types:
- name: terraform
  type: registry-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))

- name: api-call
  type: docker-image
  source:
    repository: jgriff/http-resource


resources:
- name: tfstate
  type: terraform
  icon: terraform
  source:
    env_name: ((env))
    backend_type: http
    backend_config:
      address: '((cycloid_api_url))/inventory?jwt=($ inventory_jwt $)'
    vars:
      aws_cred: ((aws_cred))
      aws_region: ((aws_region))
      env: ((env))
      project: ((project))
      customer: ((customer))
      organization_name: ((organization_name))

- name: cycloid-org
  type: api-call
  source:
    url: '((cycloid_api_url))/organizations/((parent_organization_canonical))/children'
    headers:
      Accept: '*/*'
      Content-Type: 'application/vnd.cycloid.io.v1+json'
      Authorization: 'Bearer ((cycloid_token))'
    version:
      jq: .data.canonical
      jq: .data.id
      hash: body

# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  icon: git
  source:
    uri: ((stack_git_repository))
    branch: ((stack_git_branch))
    # private_key: ((stack_git_private_key))
    # username: ((stack_git_username))
    # password: ((stack_git_token))
    paths:
      - ((stack_terraform_path))/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  icon: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    # username: ((config_git_username))
    # password: ((config_git_token))
    paths:
      - ((config_terraform_path))/*

groups:
- name: overview
  jobs:
    - cycloid-org
    - terraform-plan
    - terraform-apply

- name: destroy
  jobs:
    - terraform-destroy


jobs:
  - name: cycloid-org
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - put: cycloid-org
        params:
          text: |
            { "name": "((organization_name))" }

      - task: take-a-look
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: busybox }
          inputs:
            - name: cycloid-org
          run:
            path: cat
            args: ["cycloid-org/headers", "cycloid-org/body"]

  - name: terraform-plan
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: true

        - get: git_config-terraform
          trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          plan_only: true
          terraform_source: merged-stack/


  # Merge and trigger an apply whenever there is a terraform plan passed successfully
  - name: terraform-apply
    serial: true
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: true
          passed:
            - terraform-plan

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          plan_run: true
          terraform_source: merged-stack/


  # Destroy the infrastructure
  - name: terraform-destroy
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - in_parallel:
        - get: git_stack-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: git_config-terraform
          trigger: false
          passed:
            - terraform-plan

        - get: tfstate
          trigger: false

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
          outputs:
          - name: merged-stack
            path: "merged-stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: ((stack_terraform_path))

      - put: tfstate
        params:
          action: destroy
          terraform_source: merged-stack/
        get_params:
          action: destroy